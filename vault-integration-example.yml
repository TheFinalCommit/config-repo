# Example configuration showing Vault integration
# This would go in your config-repo/service-1/application-prod.yml

spring:
  cloud:
    vault:
      enabled: true
      host: ${SPRING_CLOUD_VAULT_HOST:vault}
      port: ${SPRING_CLOUD_VAULT_PORT:8200}
      scheme: ${SPRING_CLOUD_VAULT_SCHEME:http}
      authentication: TOKEN
      token: ${SPRING_CLOUD_VAULT_TOKEN:myroot}
      kv:
        enabled: true
        backend: secret
        default-context: service-1
        profiles-separator: '/'
      
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/service1db}
    username: ${DATABASE_USERNAME:service1user}
    # Password will be fetched from vault:secret/service-1/db:password
    password: ${vault.secret.service-1.db.password}
    
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    # Password will be fetched from vault:secret/redis:password
    password: ${vault.secret.redis.password}

# JWT Configuration for Auth Service
jwt:
  # Signing key will be fetched from vault:secret/auth/jwt:signing-key
  signing-key: ${vault.secret.auth.jwt.signing-key}
  # Encryption key will be fetched from vault:secret/auth/jwt:encryption-key
  encryption-key: ${vault.secret.auth.jwt.encryption-key}

# OAuth Configuration
oauth:
  # Client secret will be fetched from vault:secret/auth/oauth:client-secret
  client-secret: ${vault.secret.auth.oauth.client-secret}

# Messaging Configuration
messaging:
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    # Password will be fetched from vault:secret/messaging/rabbitmq:password
    password: ${vault.secret.messaging.rabbitmq.password}
  
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    # Password will be fetched from vault:secret/messaging/kafka:password
    password: ${vault.secret.messaging.kafka.password}
