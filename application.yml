# Global configuration shared by all services
spring:
  cloud:
    vault:
      enabled: true
      host: ${SPRING_CLOUD_VAULT_HOST:vault}
      port: ${SPRING_CLOUD_VAULT_PORT:8200}
      scheme: ${SPRING_CLOUD_VAULT_SCHEME:http}
      authentication: TOKEN
      token: ${SPRING_CLOUD_VAULT_TOKEN:myroot}
      kv:
        enabled: true
        backend: secret
        # default-context will be the application name (service-1, service-2, etc.)
        # This automatically maps to vault paths like: secret/service-1/, secret/auth-service/
        profiles-separator: '/'
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${OAUTH2_ISSUER_URI:http://localhost:8081/}
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    serialization:
      write-dates-as-timestamps: false
      
  # Shared infrastructure configuration used by all services
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    # Shared secret from secret/shared/redis/password
    password: ${vault.secret.shared.redis.password}
    
  # Example shared external API configuration
  external-api:
    base-url: ${EXTERNAL_API_URL:https://api.example.com}
    # Shared API key from secret/shared/api/key
    api-key: ${vault.secret.shared.api.key}

# Common Eureka client configuration
eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_DEFAULT_ZONE:http://localhost:8761/eureka/}
    healthcheck:
      enabled: true

# Actuator configuration for monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,gateway
  endpoint:
    health:
      show-details: when-authorized
  health:
    circuitbreakers:
      enabled: true
    retries:
      enabled: true
  # Fixed deprecated prometheus configuration
  prometheus:
    metrics:
      export:
        enabled: ${PROMETHEUS_ENABLED:false}
  tracing:
    sampling:
      probability: ${TRACING_SAMPLING_PROBABILITY:0.1}

# Resilience4j Default Configuration (services can override as needed)
resilience4j:
  circuitbreaker:
    configs:
      default:
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        record-exceptions:
          - java.net.ConnectException
          - java.util.concurrent.TimeoutException
          - org.springframework.web.client.ResourceAccessException

  retry:
    configs:
      default:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - java.net.ConnectException
          - java.util.concurrent.TimeoutException
          - org.springframework.web.client.ResourceAccessException

  timelimiter:
    configs:
      default:
        timeout-duration: 3s
        cancel-running-future: true

# Common CORS configuration
cors:
  allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
  allowed-headers: ${CORS_ALLOWED_HEADERS:*}
  allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}
  max-age: ${CORS_MAX_AGE:3600}

# Common logging configuration
logging:
  level:
    root: INFO
    org.springframework.web: INFO
    org.springframework.security: INFO
  pattern:
    console: "${LOGGING_PATTERN_CONSOLE:%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"
    file: "${LOGGING_PATTERN_FILE:%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"
  file:
    name: "${LOGGING_FILE_PATH:./logs}/${spring.application.name:application}.log"
  logback:
    rollingpolicy:
      max-file-size: "${LOGGING_FILE_MAX_SIZE:100MB}"
      max-history: "${LOGGING_FILE_MAX_HISTORY:30}"
      total-size-cap: "${LOGGING_FILE_TOTAL_SIZE_CAP:1GB}"

# Database configuration template (services can override)
spring.datasource:
  url: ${DATABASE_URL:jdbc:h2:mem:testdb}
  username: ${DATABASE_USERNAME:sa}
  password: ${DATABASE_PASSWORD:}
  driver-class-name: ${DATABASE_DRIVER:org.h2.Driver}

spring.jpa:
  hibernate:
    ddl-auto: ${JPA_DDL_AUTO:update}
  show-sql: ${JPA_SHOW_SQL:false}
  properties:
    hibernate:
      dialect: ${JPA_DIALECT:org.hibernate.dialect.H2Dialect}
